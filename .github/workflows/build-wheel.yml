# Build a wheel for MLflow and upload it as an artifact.
name: build-wheel

on:
  push:
    branches:
      - master
      - branch-[0-9]+.[0-9]+
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  workflow_dispatch:
    inputs:
      ref:
        description: "The branch, tag or SHA to build the wheel from."
        required: true
        default: "master"

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash --noprofile --norc -exo pipefail {0}

jobs:
  build:
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        type: ["full", "skinny"]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.inputs.ref }}
      - uses: ./.github/actions/untracked
      - uses: ./.github/actions/setup-python
      - uses: ./.github/actions/setup-node

      - name: Build UI
        working-directory: mlflow/server/js
        run: |
          yarn
          yarn build

      - name: Install dependencies
        run: |
          pip install build twine

      - name: Build distribution files
        id: build-dist
        env:
          EVENT_NAME: ${{ github.event_name }}
          MATRIX_TYPE: ${{ matrix.type }}
        run: |
          # if workflow_dispatch is triggered, use the specified ref
          if [ "$EVENT_NAME" == "workflow_dispatch" ]; then
            SHA_OPT="--sha $(git rev-parse HEAD)"
          else
            SHA_OPT=""
          fi

          if [ "$MATRIX_TYPE" == "skinny" ]; then
            PACKAGE_TYPE_OPT="--package-type skinny"
          else
            PACKAGE_TYPE_OPT=""
          fi
          python dev/build.py $PACKAGE_TYPE_OPT $SHA_OPT

          # List distribution files and check their file sizes
          ls -lh dist

          # Set step outputs
          sdist_path=$(find dist -type f -name "*.tar.gz")
          wheel_path=$(find dist -type f -name "*.whl")
          wheel_name=$(basename $wheel_path)
          wheel_size=$(stat -c %s $wheel_path)
          echo "sdist-path=${sdist_path}" >> $GITHUB_OUTPUT
          echo "wheel-path=${wheel_path}" >> $GITHUB_OUTPUT
          echo "wheel-name=${wheel_name}" >> $GITHUB_OUTPUT
          echo "wheel-size=${wheel_size}" >> $GITHUB_OUTPUT

      - name: List files in source distribution
        env:
          SDIST_PATH: ${{ steps.build-dist.outputs.sdist-path }}
        run: |
          tar -tf $SDIST_PATH

      - name: List files in binary distribution
        env:
          WHEEL_PATH: ${{ steps.build-dist.outputs.wheel-path }}
        run: |
          unzip -l $WHEEL_PATH

      - name: Compare files in source and binary distributions
        env:
          SDIST_PATH: ${{ steps.build-dist.outputs.sdist-path }}
          WHEEL_PATH: ${{ steps.build-dist.outputs.wheel-path }}
        run: |
          tar -tzf $SDIST_PATH | grep -v '/$' | cut -d'/' -f2- | sort > /tmp/source.txt
          zipinfo -1 $WHEEL_PATH | sort > /tmp/wheel.txt
          diff /tmp/source.txt /tmp/wheel.txt || true

      - name: Run twine check
        env:
          WHEEL_PATH: ${{ steps.build-dist.outputs.wheel-path }}
        run: |
          twine check --strict $WHEEL_PATH

      - name: Test installation from tarball
        env:
          SDIST_PATH: ${{ steps.build-dist.outputs.sdist-path }}
        run: |
          pip install $SDIST_PATH
          python -c "import mlflow; print(mlflow.__version__)"
          python -c "from mlflow import *"

      - name: Test installation from wheel
        env:
          WHEEL_PATH: ${{ steps.build-dist.outputs.wheel-path }}
        run: |
          pip install --force-reinstall $WHEEL_PATH
          python -c "import mlflow; print(mlflow.__version__)"
          python -c "from mlflow import *"

      - name: Test installation from GitHub
        env:
          REPO: ${{ github.repository }}
          REF: ${{ github.ref }}
          MATRIX_TYPE: ${{ matrix.type }}
        run: |
          if [ "$MATRIX_TYPE" == "skinny" ]; then
            URL="git+https://github.com/${REPO}.git@${REF}#subdirectory=skinny"
          else
            URL="git+https://github.com/${REPO}.git@${REF}"
          fi
          docker run --rm python:3.10 bash -c "pip install $URL && mlflow --version"
      # Anyone with read access can download the uploaded wheel on GitHub.
      - name: Upload wheel
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: github.event_name == 'workflow_dispatch'
        id: upload-wheel
        env:
          WHEEL_NAME: ${{ steps.build-dist.outputs.wheel-name }}
          WHEEL_PATH: ${{ steps.build-dist.outputs.wheel-path }}
        with:
          name: $WHEEL_NAME
          path: $WHEEL_PATH
          retention-days: 7
          if-no-files-found: error

      - name: Generate summary
        if: github.event_name == 'workflow_dispatch'
        env:
          ARTIFACT_URL: ${{ steps.upload-wheel.outputs.artifact-url }}
        run: |
          echo "### Download URL" >> $GITHUB_STEP_SUMMARY
          echo "$ARTIFACT_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Notes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- The artifact will be deleted after 7 days." >> $GITHUB_STEP_SUMMARY
          echo "- Unzip the downloaded artifact to get the wheel." >> $GITHUB_STEP_SUMMARY
